ggplot(monthly_average, aes(x = factor(Month), y = averageM2)) +
geom_point()+
geom_smooth(method = lm,se=F)
yearly_average <- data %>%
group_by(Year) %>%
summarize(averageM1 = mean(Narrow.Money.M1), averageM2 = mean(Money.Supply.M2))
write.csv(yearly_average, "yearly_average.csv")
ggplot(yearly_average, aes(x = Year, y = averageM2)) +
geom_point()+
geom_smooth(method = lm,se=F)
ggplot(yearly_average, aes(x = Year, y = averageM1)) +
geom_point()+
geom_smooth(method = lm,se=F)
#Time series Analysis
par(mar = c(2, 2, 2, 2))
hist(data$Narrow.Money.M1)
#par(mar = c(2, 2, 2, 2))
hist(data$Money.Supply.M2, bins = 10)
#Convert the data to time series data
datats <- ts(data = data[3:4], start = c(1994,1), frequency = 12)
write.csv(summary(datats),"descriptive.csv")
apply(datats,2, shapiro.test)
#Plot the data
plot(datats, plot.type = "single", col = 3:4)
legend("topleft",legend = colnames(datats), lty = 1, ncol = 2, col = 3:4, cex = 0.9)
#Acf plot
apply(datats, 2, acf)
#PACF
apply(datats, 2, pacf)
#Test for stationarity
stationarity <- apply(datats,2, adf.test)
stationarity
diff_o1 <- diff(datats)
apply(diff_o1, 2, adf.test)
diff_o2 <- diff(diff_o1)
apply(diff_o2, 2, adf.test)
#Selecting the best lag
lag_select <- VARselect(diff_o2, lag.max = 10, type = "const")
lag_select$selection
#Classical multivariate time series model using vector autoregressive model
cm1 <- VAR(diff_o2, p =10)
summary(cm1)
#Autocorrelation test
serial1 <- serial.test(cm1, lags.pt = 12, type = "PT.asymptotic")
serial1
#Heteroscedascity test
arch1 <- arch.test(cm1, lags.multi = 12)
arch1
#Normality test
norm1 <- normality.test(cm1)
norm1
#structural breaks in residual test
stability1 <- stability(cm1)
plot(stability1)
#Granger Causality
granger_M1 <- causality(cm1, cause = "Narrow.Money.M1")
granger_M1
granger_M2 <- causality(cm1, cause = "Money.Supply.M2")
granger_M2
#Variance decomposition
fevd1 <- vars::fevd(cm1, n.ahead = 4)
plot(fevd1)
#log transformation
datats2 <- log(datats)
summary(datats2)
#Plot the data
plot(datats2, plot.type = "single", col = 3:4)
legend("topleft",legend = colnames(datats2), lty = 1, ncol = 2, col = 3:4, cex = 0.9)
#Acf plot
datats2df <- as.data.frame(datats2)
sapply(1:ncol(datats2df),function(i) {acf(datats2df[,i],main = colnames(datats2df[i]))})
#PACF
sapply(1:ncol(datats2df),function(i) {pacf(datats2df[,i],main = colnames(datats2df[i]))})
#Test for stationarity
apply(datats2,2, adf.test)
diff_t2 <- diff(datats2)
apply(diff_t2, 2, adf.test)
#Selecting the best lag
VARselect(diff_t2, lag.max = 10, type = "const")$selection
plot(diff_t2)
#Classical multivariate time series model using vector autoregressive model
cm3 <- VAR(diff_t2, p =1)
summary(cm3)
plot(ts(fitted(cm3), frequency = 12))
#Autocorrelation test
serial.test(cm3, lags.pt = 12, type = "PT.asymptotic")
#Heteroscedascity test
arch.test(cm3, lags.multi = 12)
#Normality test
normality.test(cm3)
#structural breaks in residual test
stable <- stability(cm3)
plot(stability(cm3))
#Causality test
granger_M1 <- causality(cm3, cause = "Narrow.Money.M1")
granger_M1
granger_M2 <- causality(cm3, cause = "Money.Supply.M2")
granger_M2
#Variance decomposition
fevd1 <- vars::fevd(cm3, n.ahead = 4)
plot(fevd1)
#Impulse response function
M1_irf1 <- vars::irf(cm3, impulse = "Narrow.Money.M1", response = "Money.Supply.M2")
plot(M1_irf1)
M2_irf1 <- vars::irf(cm3, impulse = "Money.Supply.M2", response = "Narrow.Money.M1")
plot(M2_irf1)
#Forecast
forecast_cm <- predict(cm3, n.ahead =4)
# get the predicted values
diff_fo_df <- data.frame(
Narrow.Money.M1 <- forecast_cm$fcst$Narrow.Money.M1[,1],
Money.Supply.M2 <- forecast_cm$fcst$Money.Supply.M2[,1]
)
names(diff_fo_df) <- c("Narrow.Money.M1", "Money.Supply.M2")
# Merge the predicted with the diff data
diff_t2_df <- as.data.frame(diff_t2)
diff_t2_df <- rbind(diff_t2_df, diff_fo_df)
forecast1 <- data.frame(
M1 = exp(cumsum(c(datats2[1,1], diff_t2_df[,1]))),
M2 = exp(cumsum(c(datats2[1,2], diff_t2_df[,2])))
)
fanchart(forecast_cm, names = "Narrow.Money.M1")
fanchart(forecast_cm, names = "Money.Supply.M2")
#Multivariate time series using Bayesian approach
lag_order <- 1
hyperparameters <- list(prior_type ="MN", lambda = 1 , phi = 1, delta = 1)
bvar_model1 <- bvar(data = diff_t2, lags = lag_order, hyper = hyperparameters)
summary(bvar_model1)
#Impulse response function
M1_irf2 <- irf(bvar_model1)
plot(M1_irf2)
plot(ts(fitted(bvar_model1), frequency = 12))
#Variance decomposition
fevd2 <- fevd(bvar_model1)
plot(fevd2)
summary(forecast_bm)
plot(forecast_bm)
AIC(cm3)
AIC(bvar_model1)
BIC(cm3)
BIC(bvar_model1)
posterior_samples <- getdraws(bvar_model1)
posterior_samples <- posterior(bvar_model1)
posterior_samples <- coef(bvar_model1)
# Calculate posterior standard deviations
posterior_sd <- apply(posterior_samples, 2, sd)
posterior_sd
#load needed packages
library(dplyr)
library(RSQLite)
library(magrittr)
library(Hmisc)
rcorr(as.matrix(df1),type="pearson")
#path to database file
db_file <- "C:\\Users\\Barakat Ogunjoun\\OneDrive\\Desktop\\TheLabDB (2).sqlite"
# Connect to the SQLite database
con <- dbConnect(SQLite(), dbname = db_file)
#load needed tables into data frames
experiments  <- dbGetQuery(con,"SELECT * FROM experiments" )
scientists <- dbGetQuery(con,"SELECT * FROM scientists" )
exp_chem <- dbGetQuery(con,"SELECT * FROM exp_chem" )
op_units <- dbGetQuery(con,"SELECT * FROM op_units" )
# Close the database connection
dbDisconnect(con)
#function to convert duration from character to minutes
#(needed for correlation test)
convert_to_minutes <- function(time_string) {
time_parts <- strsplit(time_string, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
seconds <- as.numeric(time_parts[3])
total_minutes <- hours * 60 + minutes + seconds / 60
return(total_minutes)
}
#join data frames for functionality one
f1 <- scientists %>%
right_join(experiments, by = c("id" = "scientist_id")) %>%
mutate(
birth_date = as.Date(birth_date, format = "%d.%m.%Y"),
date = as.Date(date),
duration_mins = sapply(duration, convert_to_minutes),
age = trunc(as.numeric(difftime(date, birth_date, units = "days")) / 365.25)
) %>%
select(duration_mins, exp_class, age, graduation_year) %>%
rcorr(as.matrix(),type="pearson")
#join data frames for functionality one
f1 <- scientists %>%
right_join(experiments, by = c("id" = "scientist_id")) %>%
mutate(
birth_date = as.Date(birth_date, format = "%d.%m.%Y"),
date = as.Date(date),
duration_mins = sapply(duration, convert_to_minutes),
age = trunc(as.numeric(difftime(date, birth_date, units = "days")) / 365.25)
) %>%
select(duration_mins, exp_class, age, graduation_year)
rcorr(as.matrix(f1),type="pearson")
#Extracting data for functionality two
f2 <- scientists %>%
right_join(experiments, by = c("id" = "scientist_id")) %>%
mutate(
duration_mins = round(sapply(duration,convert_to_minutes), 2),
exp_date_month = as.numeric(format(as.Date(date), "%m"))
) %>%
select(success, exp_class, duration_mins, exp_date_month)
rcorr(as.matrix(f2),type="spearman")
setwd("C:\\Users\\Barakat Ogunjoun\\OneDrive\\Desktop\\Publications")
#import libraries
library(brms)
library(rstanarm)
library(readr)
library(fastDummies)
library(corrplot)
library(ggplot2)
library(lmtest)
library(car)
library(mgcv)
library(UPG)
#import dataset
data  <- read.csv("survey lung cancer.csv", header = T)
head(data)
summary(data)
str(data)
# Cross-tabulation for SMOKING and LUNG_CANCER
smoking_gender <- xtabs(~LUNG_CANCER + GENDER, data = data)
smoking_gender <- as.data.frame.matrix(smoking_gender)
smoking_gender$SMOKING <- rownames(smoking_gender)
# Plot
ggplot(smoking_gender, aes(x = SMOKING, y = YES, fill = NO)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Cross-tabulation of Smoking and Lung Cancer", x = "Smoking", y = "Lung Cancer") +
theme_minimal()
View(smoking_gender)
# Plot
ggplot(smoking_gender, aes(x = SMOKING, y = M, fill = F)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Cross-tabulation of Smoking and Lung Cancer", x = "Smoking", y = "Lung Cancer") +
theme_minimal()
str(data)
data = subset(data, select = -c(GENDER_F,LUNG_CANCER_NO,SMOKING,YELLOW_FINGERS_1,
ANXIETY_1, ALLERGY_1, PEER_PRESSURE_1, COUGHING_1,
CHRONIC.DISEASE_1, FATIGUE_1, WHEEZING_1,
ALCOHOL.CONSUMING_1, CHEST.PAIN_1,
SWALLOWING.DIFFICULTY_1, SHORTNESS.OF.BREATH_1))
#correlation heatmap
# Convert all variables except 'z' to character
data[, -which(names(data) == "AGE")] <- lapply(data[, -which(names(data) == "AGE")],
as.character)
str(data)
data = subset(data, select = -c(GENDER_F,LUNG_CANCER_NO,SMOKING,YELLOW_FINGERS_1,
ANXIETY_1, ALLERGY_1, PEER_PRESSURE_1, COUGHING_1,
CHRONIC.DISEASE_1, FATIGUE_1, WHEEZING_1,
ALCOHOL.CONSUMING_1, CHEST.PAIN_1,
SWALLOWING.DIFFICULTY_1, SHORTNESS.OF.BREATH_1))
summary(data)
#import dataset
data  <- read.csv("survey lung cancer.csv", header = T)
#correlation heatmap
# Convert all variables except 'z' to character
data[, -which(names(data) == "AGE")] <- lapply(data[, -which(names(data) == "AGE")],
as.character)
str(data)
data <- dummy_cols(data, select_columns = c("GENDER","LUNG_CANCER", "SMOKING",
"YELLOW_FINGERS", "ANXIETY", "ALLERGY",
"PEER_PRESSURE", "CHRONIC.DISEASE",
"FATIGUE", "WHEEZING", "COUGHING",
"ALCOHOL.CONSUMING", "CHEST.PAIN",
"SWALLOWING.DIFFICULTY",
"SHORTNESS.OF.BREATH"),
remove_selected_columns = TRUE)
data = subset(data, select = -c(GENDER_F, LUNG_CANCER_NO,SMOKING,YELLOW_FINGERS_1,
ANXIETY_1, ALLERGY_1, PEER_PRESSURE_1, COUGHING_1,
CHRONIC.DISEASE_1, FATIGUE_1, WHEEZING_1,
ALCOHOL.CONSUMING_1, CHEST.PAIN_1,
SWALLOWING.DIFFICULTY_1, SHORTNESS.OF.BREATH_1))
#import dataset
data  <- read.csv("survey lung cancer.csv", header = T)
#correlation heatmap
# Convert all variables except 'z' to character
data[, -which(names(data) == "AGE")] <- lapply(data[, -which(names(data) == "AGE")],
as.character)
str(data)
data <- dummy_cols(data, select_columns = c("GENDER","LUNG_CANCER", "SMOKING",
"YELLOW_FINGERS", "ANXIETY", "ALLERGY",
"PEER_PRESSURE", "CHRONIC.DISEASE",
"FATIGUE", "WHEEZING", "COUGHING",
"ALCOHOL.CONSUMING", "CHEST.PAIN",
"SWALLOWING.DIFFICULTY",
"SHORTNESS.OF.BREATH"),
remove_selected_columns = TRUE)
data = subset(data, select = -c(GENDER_F, LUNG_CANCER_NO, SMOKING_1,YELLOW_FINGERS_1,
ANXIETY_1, ALLERGY_1, PEER_PRESSURE_1, COUGHING_1,
CHRONIC.DISEASE_1, FATIGUE_1, WHEEZING_1,
ALCOHOL.CONSUMING_1, CHEST.PAIN_1,
SWALLOWING.DIFFICULTY_1, SHORTNESS.OF.BREATH_1))
head(data)
attach(data)
summary(data)
correlation_matrix <- cor(data)
#Logit model
logit_model <- glm(LUNG_CANCER_YES ~ factor(SMOKING_2) + factor(ANXIETY_2) +
factor(YELLOW_FINGERS_2) + factor(CHRONIC.DISEASE_2) +
factor(FATIGUE_2) + factor(ALLERGY_2) + factor(COUGHING_2) +
factor(PEER_PRESSURE_2) + factor(WHEEZING_2) + AGE +
factor(ALCOHOL.CONSUMING_2) + factor(COUGHING_2) +
factor(SWALLOWING.DIFFICULTY_2) + factor(CHEST.PAIN_2) +
factor(SHORTNESS.OF.BREATH_2) + factor(GENDER_M),
family = binomial(link = "logit"), data = data)
summary(logit_model)
#Probit model
probit_model <- glm(LUNG_CANCER_YES ~ factor(SMOKING_2) + factor(ANXIETY_2) +
factor(YELLOW_FINGERS_2) + factor(CHRONIC.DISEASE_2) +
factor(FATIGUE_2) + factor(ALLERGY_2) + factor(COUGHING_2) +
factor(PEER_PRESSURE_2) + factor(WHEEZING_2) + AGE +
factor(ALCOHOL.CONSUMING_2) + factor(COUGHING_2) +
factor(SWALLOWING.DIFFICULTY_2) + factor(CHEST.PAIN_2) +
factor(SHORTNESS.OF.BREATH_2) + factor(GENDER_M),
family = binomial(link = "probit"), data = data)
summary(probit_model)
BIC(logit_model)
predicted_logit <- data.frame(probability.of.LC = logit_model$fitted.values, LC = data$LUNG_CANCER_YES)
predicted_logit <- predicted_logit[order(predicted_logit$probability.of.LC, decreasing = FALSE)]
predicted_logit <- predicted_logit[order(predicted_logit$probability.of.LC, decreasing = FALSE),]
predicted_logit$rank <- 1:nrow(predicted_logit)
library(cowplot)
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, shape = 4. stroke = 2)) +
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, shape = 4, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer")
library(dplyr)
data$LUNG_CANCER_YES
str(data$LUNG_CANCER_YES)
predicted_logit <- data.frame(probability.of.LC = logit_model$fitted.values, LC = as.factor(data$LUNG_CANCER_YES))
predicted_logit <- predicted_logit[order(predicted_logit$probability.of.LC, decreasing = FALSE),]
predicted_logit$rank <- 1:nrow(predicted_logit)
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, shape = 4, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer")
is.factor(predicted_logit$LC)
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, shape = 4, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer")
#import dataset
data  <- read.csv("survey lung cancer.csv", header = T)
str(data)
data <- dummy_cols(data, select_columns = c("GENDER", "SMOKING",
"YELLOW_FINGERS", "ANXIETY", "ALLERGY",
"PEER_PRESSURE", "CHRONIC.DISEASE",
"FATIGUE", "WHEEZING", "COUGHING",
"ALCOHOL.CONSUMING", "CHEST.PAIN",
"SWALLOWING.DIFFICULTY",
"SHORTNESS.OF.BREATH"),
remove_selected_columns = TRUE)
data = subset(data, select = -c(GENDER_F, SMOKING_1,YELLOW_FINGERS_1,
ANXIETY_1, ALLERGY_1, PEER_PRESSURE_1, COUGHING_1,
CHRONIC.DISEASE_1, FATIGUE_1, WHEEZING_1,
ALCOHOL.CONSUMING_1, CHEST.PAIN_1,
SWALLOWING.DIFFICULTY_1, SHORTNESS.OF.BREATH_1))
#Logit model
logit_model <- glm(factor(LUNG_CANCER) ~ factor(SMOKING_2) + factor(ANXIETY_2) +
factor(YELLOW_FINGERS_2) + factor(CHRONIC.DISEASE_2) +
factor(FATIGUE_2) + factor(ALLERGY_2) + factor(COUGHING_2) +
factor(PEER_PRESSURE_2) + factor(WHEEZING_2) + AGE +
factor(ALCOHOL.CONSUMING_2) + factor(COUGHING_2) +
factor(SWALLOWING.DIFFICULTY_2) + factor(CHEST.PAIN_2) +
factor(SHORTNESS.OF.BREATH_2) + factor(GENDER_M),
family = binomial(link = "logit"), data = data)
summary(logit_model)
predicted_logit <- data.frame(probability.of.LC = logit_model$fitted.values, LC = as.factor(data$LUNG_CANCER_YES))
predicted_logit <- data.frame(probability.of.LC = logit_model$fitted.values, LC = as.factor(data$LUNG_CANCER))
predicted_logit <- predicted_logit[order(predicted_logit$probability.of.LC, decreasing = FALSE),]
predicted_logit$rank <- 1:nrow(predicted_logit)
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, shape = 4, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer")
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, shape = 2 stroke = 2)) +
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, shape = 2, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer")
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer")
# Predict outcomes
predicted_probabilities <- predict(logi_model, type = "response")
# Predict outcomes
predicted_probabilities <- predict(logit_model, type = "response")
predicted_classes <- ifelse(predicted_probabilities > 0.5, "Yes", "No")
# Actual classes
actual_classes <- data$LUNG_CANCER
# Create confusion matrix
confusion_matrix <- table(Predicted = predicted_classes, Actual = actual_classes)
print(confusion_matrix)
predicted_probit <- data.frame(probability.of.LC = probit_model$fitted.values, LC = as.factor(data$LUNG_CANCER))
predicted_probit <- predicted_probit[order(predicted_probit$probability.of.LC, decreasing = FALSE),]
predicted_probit$rank <- 1:nrow(predicted_probit)
ggplot(data = predicted_probit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer")
# Predict outcomes
predicted_probabilities_probit <- predict(probit_model, type = "response")
predicted_classes_probit <- ifelse(predicted_probabilities_probit > 0.5, "Yes", "No")
# Actual classes
actual_classes <- data$LUNG_CANCER
# Create confusion matrix
confusion_matrix_probit <- table(Predicted = predicted_classes_probit, Actual = actual_classes)
print(confusion_matrix_probit)
ggplot(data = predicted_logit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer (logit)")
ggplot(data = predicted_probit, aes(x = rank, y = probability.of.LC)) +
geom_point(aes(color = LC, alpha = 1, stroke = 2)) +
xlab("Index") +
ylab("Predicted probability of getting lung cancer (probit)")
# Create confusion matrix
confusion_matrix_probit <- table(Predicted = predicted_classes_probit, Actual = actual_classes)
print(confusion_matrix_probit)
# Calculate precision
precision_probit <- sum(predicted_classes_probit & actual_classes) / sum(predicted_classes_probit)
# Calculate precision
precision_probit <- sum(factor(predicted_classes_probit) & actual_classes) / sum(predicted_classes_probit)
factor(predicted_classes_probit)
# Calculate precision
precision_probit <- sum(factor(predicted_classes_probit) & actual_classes) / sum(factor(predicted_classes_probit))
as.factor(predicted_classes_probit)
precision_probit <- sum(predicted_classes_probit & actual_classes) / sum(predicted_classes_probit)
# Calculate precision
predicted_classes_probit <- ifelse(predicted_classes_probit "Yes", 1, 0)
# Calculate precision
predicted_classes_probit <- ifelse(predicted_classes_probit == "Yes", 1, 0)
precision_probit <- sum(predicted_classes_probit & actual_classes) / sum(predicted_classes_probit)
class(predicted_classes_probit)
actual_classes <- ifelse(actual_classes == "Yes", 1, 0)
actual_classes
# Actual classes
actual_classes <- data$LUNG_CANCER
actual_classes <- ifelse(actual_classes == "YES", 1, 0)
actual_classes
predicted_classes_probit
# Predict outcomes
predicted_probabilities_probit <- predict(probit_model, type = "response")
predicted_classes_probit <- ifelse(predicted_probabilities_probit > 0.5, "YES", "NO")
# Actual classes
actual_classes <- data$LUNG_CANCER
# Create confusion matrix
confusion_matrix_probit <- table(Predicted = predicted_classes_probit, Actual = actual_classes)
print(confusion_matrix_probit)
# Calculate precision
predicted_classes_probit <- ifelse(predicted_classes_probit == "YES", 1, 0)
actual_classes <- ifelse(actual_classes == "YES", 1, 0)
precision_probit <- sum(predicted_classes_probit & actual_classes) / sum(predicted_classes_probit)
print(precision_probit)
# Calculate recall
recall <- sum(predicted_classes_probit & actual_classes) / sum(actual_classes)
print(recall)
# Calculate F1-score
f1_score_probit <- 2 * (precision * recall) / (precision + recall)
# Calculate recall
recall_probit <- sum(predicted_classes_probit & actual_classes) / sum(actual_classes)
print(recall_probit)
# Calculate F1-score
f1_score_probit <- 2 * (precision_probit * recall_probit) / (precision_probit + recall_probit)
print(f1_score_probit)
# Calculate precision
predicted_classes_logit <- ifelse(predicted_classes_logit == "YES", 1, 0)
# Calculate precision
predicted_classes_logit <- ifelse(predicted_classes == "YES", 1, 0)
precision_logit <- sum(predicted_classes_logit & actual_classes) / sum(predicted_classes_logit)
print(precision_logit)
# Actual classes
actual_classes <- data$LUNG_CANCER
precision_logit <- sum(predicted_classes_logit & actual_classes) / sum(predicted_classes_logit)
print(precision_logit)
actual_classes <- ifelse(actual_classes == "YES", 1, 0)
precision_logit <- sum(predicted_classes_logit & actual_classes) / sum(predicted_classes_logit)
print(precision_logit)
# Calculate precision
predicted_classes_logit <- ifelse(predicted_classes == "Yes", 1, 0)
precision_logit <- sum(predicted_classes_logit & actual_classes) / sum(predicted_classes_logit)
print(precision_logit)
# Calculate recall
recall_logit <- sum(predicted_classes_logit & actual_classes) / sum(actual_classes)
print(recall_logit)
# Calculate F1-score
f1_score_logit <- 2 * (precision_logit * recall_logit) / (precision_logit + recall_logit)
print(f1_score_logit)
library(pROC)
#ROC and AUC
roc_obj <- roc(actual_classes, predicted_classes_logit)
plot(roc_obj)
auc(roc_obj)
ggroc(roc_obj) + ggtitle("Logit ROC Curve") + xlab("1 - Specificity") + ylab("Sensitivity")
auc_value <- round(auc(roc_obj), 4)
ggroc(roc_obj) + ggtitle(paste0("ROC Curve (AUC = ", auc_value, ")"))
ggroc(roc_obj) + ggtitle(paste0("Logit ROC Curve (AUC = ", auc_value, ")"))
#ROC and AUC
roc_obj_probit <- roc(actual_classes, predicted_classes_probit)
plot(roc_obj_probit)
auc(roc_obj_probit)
ggroc(roc_obj_probit) + ggtitle("Probit ROC Curve") + xlab("1 - Specificity") + ylab("Sensitivity")
auc_value <- round(auc(roc_obj_probit), 4)
ggroc(roc_obj_probit) + ggtitle(paste0("Probit ROC Curve (AUC = ", auc_value, ")"))
